How to install puppetmaster 3.x in ubuntu server 16.04.

The puppet master for ubuntu seems to be broken for other versions of ruby except the:
[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-head] # security released on head
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p330]
[ruby-]1.9.3[-p551]
[ruby-]2.0.0[-p648]

It does not work for the ruby versions:

[ruby-]2.1[.10]
[ruby-]2.2[.6]
[ruby-]2.3[.3]
[ruby-]2.4[.0-rc1]

You need to install rvm first on your server and then install ruby's specific version through rvm.

To install ruby on rails with rvm follow the link.
https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rvm-on-ubuntu-16-04

If you need to install a specific version of Ruby for your application, rather than just the most recent one,
you can do so with RVM. First, check to see which versions of Ruby are available by listing them:

# rvm list known
Then, install the specific version of Ruby that you need through RVM, where ruby_version can be typed as ruby-2.3.0, for instance, or just 2.3.0:

# rvm install ruby_version

After the installation, we can list the available Ruby versions we have installed by typing:

# rvm list
and also
# ruby --version

We can switch between the Ruby versions by typing:

# rvm use ruby_version

The Best tutorial on internet for puppet to follow is:
#  https://www.digitalocean.com/community/tutorials/how-to-install-puppet-4-in-a-master-agent-setup-on-ubuntu-14-04
#  https://www.digitalocean.com/community/tutorials/getting-started-with-puppet-code-manifests-and-modules


* To generate a new SSL key for a puppet agent we need to do the following.
1. Clean the puppet agent certificate from the puppet master server.
#  puppet cert clean "agent-cert-name"
2. delete the .pem files from /var/lib/puppet directory.
#  find /var/lib/puppet/ -type f -iname *.pem
#  find /var/lib/puppet/ -type f -iname *.pem -exec rm -rf {} \;
after deleting this file you can now generate new certificate for the agent machine with puppet agent -t command.

Generate a new certificate with
#  puppet agent -t --verbose --no-daemonize

This will generate a new certificate and will go to the master for signning, the agent will look for /etc/puppet/puppet.conf file for the
master declaration in the [main] section and send its certificate to that machine, which defaults to puppet.
After certificate signature from the master server the agent will get a .json file, which will make confirm that the agent got registered to the master.
#  find /var/lib/puppet/ -type f -iname *.json -exec ls -l {} \;

3. You can also delete the /var/lib/puppet/ssl directory totally to regenrate new agent certificates.
# rm -rf /var/lib/puppet/ssl/ && puppet agent -t --no-daemonize --verbose --onetime

* To regenerate the inventory file in puppet master server.
The inventory file is located in:
#  find /var/lib/puppet/ -type f -iname inventory*
/var/lib/puppet/ssl/ca/inventory.txt

This inventory file contains the data about all the registered agent machines, with there certificate status, if they were reregistered, removed
at any point of time.You can regenerate the inventory file with the following command. NOTE: puppet master service should be stopped before running this command
#  puppet cert reinventory

IMPORTANT KNOWN ISSUES:

1.Puppet module 'puppetlabs-stdlib' Dependency.

Puppet will generate module, which reports dependency problem when listed.
Generate module:
puppet module generate bla-bla
Build module:
puppet module build bla-bla
Install module (It will correctly install stdlib dependency):
puppet module install /root/bla-bla/pkg/bla-bla-0.1.0.tar.gz
List modules (It will report missing dependency):
[root@puppet7 ~]$ puppet module list
Warning: Missing dependency 'puppetlabs-stdlib':
'bla-bla' (v0.1.0) requires 'puppetlabs-stdlib' (>= 0.0.0)
/etc/puppet/modules
├── bla-bla (v0.1.0)
└── puppetlabs-stdlib (v4.3.2)
/usr/share/puppet/modules (no modules installed)
Possible fix is to replace '-' with '/' in dependency part of module metadata:
#  sed -i -e 's|puppetlabs-stdlib|puppetlabs/stdlib|' bla-bla/metadata.json
Then It doesn't report anything after rebuilding and reinstalling the module.

Puppet important Commands:
1. To list the Puppet modules availiable in the system.
#  puppet module list --tree --verbose
2. To Validate the puppet program files (.pp files)
#  puppet parser validate filename.pp
3. To print the availiable puppet configurations.
#  puppet config print configuration-directive-name
4. To list the Puppet resource types
#  puppet resource --types
5. Puppet Certificate commands.
#  puppet cert list --all, puppet cert sign 'nodename', puppet cert clean 'nodename', puppet cert reinventory, puppet cert generate 'nodename'
6. To check the puppet resource usage.
#  puppet resource resource-name
7. How to declare an array of requirements to the resources in puppet.
#  Example
    	package { ['docker.io', 'docker']:     #here 2 packages will be installed docker & docker.io
  		ensure => 'present',
      }


Puppet host entries example (Sample manifest "init.pp" in a host module):
class host_entries {

  # create a simple hostname and ip host entry
  host { 'syslog':
    ip => '10.10.10.10',
  }

  # create a fully qualified full host entry with an alias
  host { 'ntpserver.example.com':
    ip           => '10.100.10.50',
    host_aliases => 'timeserver',
  }

  # host entry with multiple aliases
  host { 'dashboard':
    ip           => '10.120.100.111',
    host_aliases => [ 'nagios', 'munin' ],
  }

}
